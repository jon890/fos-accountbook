# 우리집 가계부 - Cursor AI 개발 규칙

## 🎯 프로젝트 개요
Next.js 15 + TypeScript + Prisma ORM + Tailwind CSS를 사용한 가족 가계부 애플리케이션

## 📋 코딩 컨벤션

### 1. 데이터베이스 & API 컨벤션
- **모든 데이터베이스 테이블명과 컬럼명은 snake_case 사용**
  - 예: `family_members`, `created_at`, `user_id`, `family_uuid`
- **UUID 기반 관계 설정**: 모든 테이블 간 조인은 UUID를 통해 수행
  - 예: `family_uuid`, `category_uuid` 등
- **Soft Delete 패턴**: 모든 비즈니스 테이블에 `deleted_at` 컬럼 사용

### 2. TypeScript 타입 안전성
- **절대 `any` 타입 사용 금지** - `unknown` 또는 정확한 타입 사용
- **Prisma 공식 에러 타입 사용**: `PrismaClientKnownRequestError` 등
- **Zod 스키마 검증**: `error.issues` 사용 (not `error.errors`)

### 3. 아키텍처 패턴
- **Repository 패턴**: 데이터 액세스 레이어 분리
- **Service 패턴**: 비즈니스 로직 캡슐화
- **의존성 주입**: Container를 통한 인스턴스 관리

### 4. API 설계
- **RESTful API 설계**
- **통일된 에러 처리**: `handlePrismaError`, `handleValidationError` 사용
- **BigInt 자동 직렬화**: API 응답에서 BigInt → String 변환
- **인증 래퍼**: `withAuth` 함수로 인증 통합 처리

### 5. 프론트엔드 컨벤션
- **React Hooks 최적화**: `useCallback`, `useMemo` 적절히 사용
- **Next.js Image 컴포넌트**: `<img>` 태그 대신 `<Image />` 사용
- **Tailwind CSS**: 일관된 스타일링
- **shadcn/ui**: UI 컴포넌트 라이브러리 활용

## 🛠 기술 스택
- **Frontend**: Next.js 15, React 19, TypeScript, Tailwind CSS v3
- **Backend**: Next.js API Routes, Prisma ORM
- **Database**: Supabase (PostgreSQL)
- **Authentication**: NextAuth.js (Google OAuth)
- **Deployment**: Vercel
- **Package Manager**: pnpm

## 📁 프로젝트 구조
```
src/
├── app/                 # Next.js App Router
│   ├── api/            # API Routes
│   └── (pages)/        # Page Components
├── components/         # React Components
│   ├── ui/            # shadcn/ui Components
│   ├── common/        # 공통 컴포넌트
│   └── feature/       # 기능별 컴포넌트
├── lib/               # 유틸리티 함수
├── repositories/      # 데이터 액세스 레이어
├── services/          # 비즈니스 로직 레이어
├── container/         # 의존성 주입 컨테이너
└── types/            # TypeScript 타입 정의
```

## 🚀 개발 가이드라인

### 1. 새로운 API 엔드포인트 추가 시
1. Repository 인터페이스 정의
2. Repository 구현체 작성
3. Service 레이어 구현
4. API Route 작성 (`withAuth` 사용)
5. 에러 처리 및 타입 안전성 확보

### 2. 데이터베이스 스키마 변경 시
1. Prisma 스키마 수정 (snake_case 준수)
2. `npx prisma db push` 또는 마이그레이션 생성
3. Repository 구현체 업데이트
4. 타입 정의 확인

### 3. 컴포넌트 개발 시
1. TypeScript Props 인터페이스 정의
2. React Hooks 의존성 최적화
3. 에러 바운더리 고려
4. 접근성 (a11y) 고려

## ⚠️ 주의사항
- **Production 데이터베이스에서 `--force-reset` 절대 금지**
- **환경변수 (.env.local) 커밋 금지**
- **API 키 및 민감한 정보 노출 금지**
- **타입 안전성을 위해 런타임 검증 필수**

## 🔧 유용한 명령어
```bash
# 개발 서버 실행
pnpm dev

# 데이터베이스 스키마 적용
pnpm db:push

# Prisma Studio 실행
pnpm db:studio

# 빌드 및 배포
pnpm build
vercel
```
