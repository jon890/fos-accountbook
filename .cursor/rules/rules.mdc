# 우리집 가계부 - Cursor AI 개발 규칙

## 🎯 프로젝트 개요
Next.js 15 + TypeScript + Prisma ORM + Tailwind CSS를 사용한 가족 가계부 애플리케이션

## 📋 코딩 컨벤션

### 1. 데이터베이스 & API 컨벤션
- **모든 데이터베이스 테이블명과 컬럼명은 snake_case 사용**
  - 예: `family_members`, `created_at`, `user_id`, `family_uuid`
- **UUID 기반 관계 설정**: 모든 테이블 간 조인은 UUID를 통해 수행
  - 예: `family_uuid`, `category_uuid` 등
- **Soft Delete 패턴**: 모든 비즈니스 테이블에 `deleted_at` 컬럼 사용

### 2. TypeScript 타입 안전성
- **절대 `any` 타입 사용 금지** - `unknown` 또는 정확한 타입 사용
- **Prisma 공식 에러 타입 사용**: `PrismaClientKnownRequestError` 등
- **Zod 스키마 검증**: `error.issues` 사용 (not `error.errors`)

### 3. 아키텍처 패턴
- **Repository 패턴**: 데이터 액세스 레이어 분리
- **Service 패턴**: 비즈니스 로직 캡슐화
- **의존성 주입**: Container를 통한 인스턴스 관리

### 4. API 설계
- **RESTful API 설계**
- **통일된 에러 처리**: `handlePrismaError`, `handleValidationError` 사용
- **BigInt 자동 직렬화**: API 응답에서 BigInt → String 변환
- **인증 래퍼**: `withAuth` 함수로 인증 통합 처리

### 5. 프론트엔드 컨벤션
- **React Hooks 최적화**: `useCallback`, `useMemo` 적절히 사용
- **Next.js Image 컴포넌트**: `<img>` 태그 대신 `<Image />` 사용
- **Tailwind CSS**: 일관된 스타일링
- **shadcn/ui**: UI 컴포넌트 라이브러리 활용

## 🛠 기술 스택
- **Frontend**: Next.js 15, React 19, TypeScript, Tailwind CSS v3
- **Backend**: Next.js API Routes, Prisma ORM
- **Database**: Supabase (PostgreSQL)
- **Authentication**: NextAuth.js (Google OAuth)
- **Deployment**: Vercel
- **Package Manager**: pnpm

## 📁 프로젝트 구조
```
src/
├── app/                 # Next.js App Router
│   ├── api/            # API Routes
│   └── (pages)/        # Page Components
├── components/         # React Components
│   ├── ui/            # shadcn/ui Components
│   ├── common/        # 공통 컴포넌트
│   └── feature/       # 기능별 컴포넌트
├── lib/               # 유틸리티 함수
├── repositories/      # 데이터 액세스 레이어
├── services/          # 비즈니스 로직 레이어
├── container/         # 의존성 주입 컨테이너
└── types/            # TypeScript 타입 정의
```

## 🚀 개발 가이드라인

### 1. 새로운 API 엔드포인트 추가 시
1. Repository 인터페이스 정의
2. Repository 구현체 작성
3. Service 레이어 구현
4. API Route 작성 (`withAuth` 사용)
5. 에러 처리 및 타입 안전성 확보

### 2. 데이터베이스 스키마 변경 시
1. Prisma 스키마 수정 (snake_case 준수)
2. `npx prisma db push` 또는 마이그레이션 생성
3. Repository 구현체 업데이트
4. 타입 정의 확인

### 3. 컴포넌트 개발 시
1. TypeScript Props 인터페이스 정의
2. React Hooks 의존성 최적화
3. 에러 바운더리 고려
4. 접근성 (a11y) 고려

## ⚠️ 주의사항
- **Production 데이터베이스에서 `--force-reset` 절대 금지**
- **환경변수 (.env.local) 커밋 금지**
- **API 키 및 민감한 정보 노출 금지**
- **타입 안전성을 위해 런타임 검증 필수**

## 🔧 유용한 명령어
```bash
# 개발 서버 실행
pnpm dev

# 데이터베이스 스키마 적용
pnpm db:push

# Prisma Studio 실행
pnpm db:studio

# 마이그레이션 생성 및 적용
pnpm db:migrate

# Prisma Client 생성
pnpm db:generate

# 스키마 검증
pnpm db:validate

# 빌드 및 배포
pnpm build
vercel
```

## 🗄️ 데이터베이스 스키마 규칙

### 테이블 및 컬럼 명명 규칙
- **테이블명**: snake_case (예: `family_members`, `verification_tokens`)
- **컬럼명**: snake_case (예: `user_id`, `created_at`, `family_uuid`)
- **관계 컬럼**: UUID 기반 (예: `family_uuid`, `category_uuid`)

### 스키마 예시
```prisma
model FamilyMember {
  id          BigInt    @id @default(autoincrement())
  uuid        String    @unique @default(uuid()) @db.Uuid
  family_uuid String    @db.Uuid @map("family_uuid")
  user_id     String    @map("user_id")
  role        String    @default("member")
  joined_at   DateTime  @default(now()) @map("joined_at")
  deleted_at  DateTime? @map("deleted_at")

  family Family @relation("FamilyMembers", fields: [family_uuid], references: [uuid])
  user   User   @relation("UserFamilyMembers", fields: [user_id], references: [id])

  @@unique([family_uuid, user_id])
  @@map("family_members")
}
```

## 🔄 최근 주요 개선사항 (2025-12-21)

### Repository 레이어 아키텍처 개선
- **문제**: Repository에서 `serialize()` 함수 사용으로 Date 객체가 문자열로 변환되어 ORM 이점 상실
- **해결**: 
  - Prisma가 제공하는 Date 객체를 그대로 유지
  - BigInt와 Decimal만 필요 시 문자열로 변환
  - `date.toLocaleDateString is not a function` 오류 해결

### 타입 안전성 개선
```typescript
// ❌ 기존: 직렬화로 인한 타입 혼동
interface ExpenseData {
  date: Date | string  // 불안정한 유니온 타입
  amount: string | number
}

// ✅ 개선: ORM 레이어에서 명확한 타입 유지
interface ExpenseData {
  date: Date           // Date 객체 유지
  amount: string       // Repository에서 일관된 문자열 변환
}
```

### 데이터 흐름 최적화
```
Prisma ORM → Repository → Service → UI
     ↓            ↓        ↓       ↓
   Date         Date    Date    Date  ✅ Date 객체 유지
   Decimal   → string  string  string ✅ 일관된 변환
   BigInt    → string  string  string ✅ 일관된 변환
```

### 핵심 원칙
1. **ORM 이점 활용**: Prisma의 타입 안전성과 Date 객체를 최대한 활용
2. **최소 변환**: 반드시 필요한 경우(BigInt, Decimal)만 문자열로 변환
3. **일관된 인터페이스**: Repository 레이어에서 일관된 데이터 형태 제공
4. **API 응답 시에만 Serialization**: 네트워크 전송 시에만 serialize 적용

### 중요 파일들
- `src/repositories/implementations/expense.repository.impl.ts`: Date 객체 유지 로직
- `src/repositories/interfaces/expense.repository.ts`: 정확한 타입 정의
- `src/components/expenses/ExpenseList.tsx`: Date 객체 직접 사용
- `src/lib/serialization.ts`: API 응답용 직렬화 함수 (Repository에서 사용 금지)

### 문제 해결 과정
1. **문제 발견**: `date.toLocaleDateString is not a function` 에러 발생
2. **원인 분석**: Repository에서 serialize 함수로 Date → string 변환
3. **근본 해결**: ORM 레이어에서 Date 객체 그대로 유지
4. **타입 정리**: 명확한 Date 타입 정의로 타입 안전성 확보
5. **빌드 검증**: 프로덕션 빌드 성공 확인

이 개선으로 인해 ORM의 장점을 완전히 활용하면서 타입 안전성도 크게 향상되었습니다.