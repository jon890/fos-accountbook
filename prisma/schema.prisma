generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// =====================================================
// NextAuth.js 인증 관련 모델들
// =====================================================
// 주의: 아래 Account, Session, User, VerificationToken 모델들은
// NextAuth.js 공식 스키마 형식을 정확히 따라야 합니다.
// 필드명이나 타입을 임의로 변경하면 NextAuth와 호환성 문제가 발생합니다.
// 참조: https://authjs.dev/getting-started/adapters/prisma
// =====================================================

// NextAuth.js 호환 Account 모델 (authId 참조)
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") // User.authId 참조
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation("AccountUser", fields: [userId], references: [authId], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js 호환 Session 모델 (authId 참조)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") // User.authId 참조
  expires      DateTime
  user         User     @relation("SessionUser", fields: [userId], references: [authId], onDelete: Cascade)

  @@map("sessions")
}

// 완전한 UUID 기반 User 모델
model User {
  id            BigInt         @id @default(autoincrement()) // 1,2,3... 순차 ID
  uuid          String         @unique @default(uuid()) @db.Uuid // 비즈니스 로직용 UUID
  authId        String         @unique @default(cuid()) @map("auth_id") // NextAuth 호환용 ID
  name          String?
  email         String         @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")
  accounts      Account[]      @relation("AccountUser")
  familyMembers FamilyMember[] @relation("UserFamilyMembers")
  sessions      Session[]      @relation("SessionUser")

  @@map("users")
}

// NextAuth.js 공식 스키마 형식을 따라야 합니다.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =====================================================
// 가계부 애플리케이션 비즈니스 모델들
// =====================================================
// 아래 모델들은 가계부 앱의 비즈니스 로직을 위한 것으로,
// snake_case 컨벤션과 UUID 기반 관계를 사용합니다.
// =====================================================

model Family {
  id         BigInt         @id @default(autoincrement())
  uuid       String         @unique @default(uuid()) @db.Uuid
  name       String         @db.VarChar(100)
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")
  deletedAt  DateTime?      @map("deleted_at")
  categories Category[]     @relation("FamilyCategories")
  expenses   Expense[]      @relation("FamilyExpenses")
  members    FamilyMember[] @relation("FamilyMembers")

  @@map("families")
}

model FamilyMember {
  id         BigInt    @id @default(autoincrement())
  uuid       String    @unique @default(uuid()) @db.Uuid
  familyUuid String    @map("family_uuid") @db.Uuid
  userUuid   String    @map("user_uuid") @db.Uuid // User.uuid 참조
  role       String    @default("member") @db.VarChar(20)
  joinedAt   DateTime  @default(now()) @map("joined_at")
  deletedAt  DateTime? @map("deleted_at")
  family     Family    @relation("FamilyMembers", fields: [familyUuid], references: [uuid])
  user       User      @relation("UserFamilyMembers", fields: [userUuid], references: [uuid])

  @@unique([familyUuid, userUuid])
  @@map("family_members")
}

model Category {
  id         BigInt    @id @default(autoincrement())
  uuid       String    @unique @default(uuid()) @db.Uuid
  familyUuid String    @map("family_uuid") @db.Uuid
  name       String    @db.VarChar(50)
  color      String    @default("#6366f1") @db.VarChar(7)
  icon       String?   @db.VarChar(50)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  family     Family    @relation("FamilyCategories", fields: [familyUuid], references: [uuid])
  expenses   Expense[] @relation("CategoryExpenses")

  @@map("categories")
}

model Expense {
  id           BigInt    @id @default(autoincrement())
  uuid         String    @unique @default(uuid()) @db.Uuid
  familyUuid   String    @map("family_uuid") @db.Uuid
  categoryUuid String    @map("category_uuid") @db.Uuid
  amount       Decimal   @db.Decimal(12, 2)
  description  String?
  date         DateTime  @default(now())
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  category     Category  @relation("CategoryExpenses", fields: [categoryUuid], references: [uuid])
  family       Family    @relation("FamilyExpenses", fields: [familyUuid], references: [uuid])

  @@index([familyUuid, date])
  @@index([categoryUuid])
  @@map("expenses")
}
