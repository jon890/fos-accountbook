// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =============================================
// NextAuth.js 필수 테이블
// =============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? // Soft delete

  accounts      Account[]
  sessions      Session[]
  familyMembers FamilyMember[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// =============================================
// 비즈니스 로직 테이블
// =============================================

model Family {
  id        BigInt    @id @default(autoincrement())
  uuid      String    @unique @default(uuid()) @db.Uuid
  name      String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  members    FamilyMember[]
  categories Category[]
  expenses   Expense[]

  @@map("families")
}

model FamilyMember {
  id       BigInt    @id @default(autoincrement())
  uuid     String    @unique @default(uuid()) @db.Uuid
  familyId BigInt
  userId   String
  role     String    @default("member") @db.VarChar(20) // 'admin', 'member'
  joinedAt DateTime  @default(now())
  deletedAt DateTime? // Soft delete

  family Family @relation(fields: [familyId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([familyId, userId])
  @@map("family_members")
}

model Category {
  id        BigInt    @id @default(autoincrement())
  uuid      String    @unique @default(uuid()) @db.Uuid
  familyId  BigInt
  name      String    @db.VarChar(50)
  color     String    @default("#6366f1") @db.VarChar(7) // Hex color
  icon      String?   @db.VarChar(50) // Icon name or emoji
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  family   Family    @relation(fields: [familyId], references: [id])
  expenses Expense[]

  @@map("categories")
}

model Expense {
  id          BigInt    @id @default(autoincrement())
  uuid        String    @unique @default(uuid()) @db.Uuid
  familyId    BigInt
  categoryId  BigInt
  amount      Decimal   @db.Decimal(12, 2)
  description String?   @db.Text
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // Soft delete

  family   Family   @relation(fields: [familyId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  // 성능을 위한 인덱스
  @@index([familyId, date])
  @@index([categoryId])
  @@map("expenses")
}
