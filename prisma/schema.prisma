generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                  String  @id @default(cuid())
  user_id             String  @map("user_id")
  type                String
  provider            String
  provider_account_id String  @map("provider_account_id")
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique @map("session_token")
  user_id       String   @map("user_id")
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String         @unique
  email_verified DateTime?      @map("email_verified")
  image          String?
  created_at     DateTime       @default(now()) @map("created_at")
  updated_at     DateTime       @updatedAt @map("updated_at")
  deleted_at     DateTime?      @map("deleted_at")
  accounts       Account[]
  family_members FamilyMember[] @relation("UserFamilyMembers")
  sessions       Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Family {
  id         BigInt         @id @default(autoincrement())
  uuid       String         @unique @default(uuid()) @db.Uuid
  name       String         @db.VarChar(100)
  created_at DateTime       @default(now()) @map("created_at")
  updated_at DateTime       @updatedAt @map("updated_at")
  deleted_at DateTime?      @map("deleted_at")
  categories Category[]     @relation("FamilyCategories")
  expenses   Expense[]      @relation("FamilyExpenses")
  members    FamilyMember[] @relation("FamilyMembers")

  @@map("families")
}

model FamilyMember {
  id          BigInt    @id @default(autoincrement())
  uuid        String    @unique @default(uuid()) @db.Uuid
  family_uuid String    @map("family_uuid") @db.Uuid
  user_id     String    @map("user_id")
  role        String    @default("member") @db.VarChar(20)
  joined_at   DateTime  @default(now()) @map("joined_at")
  deleted_at  DateTime? @map("deleted_at")
  family      Family    @relation("FamilyMembers", fields: [family_uuid], references: [uuid])
  user        User      @relation("UserFamilyMembers", fields: [user_id], references: [id])

  @@unique([family_uuid, user_id])
  @@map("family_members")
}

model Category {
  id          BigInt    @id @default(autoincrement())
  uuid        String    @unique @default(uuid()) @db.Uuid
  family_uuid String    @map("family_uuid") @db.Uuid
  name        String    @db.VarChar(50)
  color       String    @default("#6366f1") @db.VarChar(7)
  icon        String?   @db.VarChar(50)
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @updatedAt @map("updated_at")
  deleted_at  DateTime? @map("deleted_at")
  family      Family    @relation("FamilyCategories", fields: [family_uuid], references: [uuid])
  expenses    Expense[] @relation("CategoryExpenses")

  @@map("categories")
}

model Expense {
  id            BigInt    @id @default(autoincrement())
  uuid          String    @unique @default(uuid()) @db.Uuid
  family_uuid   String    @map("family_uuid") @db.Uuid
  category_uuid String    @map("category_uuid") @db.Uuid
  amount        Decimal   @db.Decimal(12, 2)
  description   String?
  date          DateTime  @default(now())
  created_at    DateTime  @default(now()) @map("created_at")
  updated_at    DateTime  @updatedAt @map("updated_at")
  deleted_at    DateTime? @map("deleted_at")
  category      Category  @relation("CategoryExpenses", fields: [category_uuid], references: [uuid])
  family        Family    @relation("FamilyExpenses", fields: [family_uuid], references: [uuid])

  @@index([family_uuid, date])
  @@index([category_uuid])
  @@map("expenses")
}
